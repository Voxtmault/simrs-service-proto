// source: emergency_room.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var helper_pb = require('./helper_pb.js');
goog.object.extend(proto, helper_pb);
goog.exportSymbol('proto.simrs.AddERPatientRequest', null, global);
goog.exportSymbol('proto.simrs.CompensateAddERPatientEncounterRequest', null, global);
goog.exportSymbol('proto.simrs.ERPatient', null, global);
goog.exportSymbol('proto.simrs.GenericERServiceResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simrs.AddERPatientRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simrs.AddERPatientRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simrs.AddERPatientRequest.displayName = 'proto.simrs.AddERPatientRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simrs.CompensateAddERPatientEncounterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simrs.CompensateAddERPatientEncounterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simrs.CompensateAddERPatientEncounterRequest.displayName = 'proto.simrs.CompensateAddERPatientEncounterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simrs.ERPatient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simrs.ERPatient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simrs.ERPatient.displayName = 'proto.simrs.ERPatient';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simrs.GenericERServiceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simrs.GenericERServiceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simrs.GenericERServiceResponse.displayName = 'proto.simrs.GenericERServiceResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simrs.AddERPatientRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.simrs.AddERPatientRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simrs.AddERPatientRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.AddERPatientRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    erpatient: (f = msg.getErpatient()) && proto.simrs.ERPatient.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simrs.AddERPatientRequest}
 */
proto.simrs.AddERPatientRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simrs.AddERPatientRequest;
  return proto.simrs.AddERPatientRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simrs.AddERPatientRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simrs.AddERPatientRequest}
 */
proto.simrs.AddERPatientRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.simrs.ERPatient;
      reader.readMessage(value,proto.simrs.ERPatient.deserializeBinaryFromReader);
      msg.setErpatient(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simrs.AddERPatientRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simrs.AddERPatientRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simrs.AddERPatientRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.AddERPatientRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErpatient();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.simrs.ERPatient.serializeBinaryToWriter
    );
  }
};


/**
 * optional ERPatient erPatient = 1;
 * @return {?proto.simrs.ERPatient}
 */
proto.simrs.AddERPatientRequest.prototype.getErpatient = function() {
  return /** @type{?proto.simrs.ERPatient} */ (
    jspb.Message.getWrapperField(this, proto.simrs.ERPatient, 1));
};


/**
 * @param {?proto.simrs.ERPatient|undefined} value
 * @return {!proto.simrs.AddERPatientRequest} returns this
*/
proto.simrs.AddERPatientRequest.prototype.setErpatient = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.AddERPatientRequest} returns this
 */
proto.simrs.AddERPatientRequest.prototype.clearErpatient = function() {
  return this.setErpatient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.AddERPatientRequest.prototype.hasErpatient = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simrs.CompensateAddERPatientEncounterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.simrs.CompensateAddERPatientEncounterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simrs.CompensateAddERPatientEncounterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.CompensateAddERPatientEncounterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    queueid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    actorid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    encounterid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simrs.CompensateAddERPatientEncounterRequest}
 */
proto.simrs.CompensateAddERPatientEncounterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simrs.CompensateAddERPatientEncounterRequest;
  return proto.simrs.CompensateAddERPatientEncounterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simrs.CompensateAddERPatientEncounterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simrs.CompensateAddERPatientEncounterRequest}
 */
proto.simrs.CompensateAddERPatientEncounterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQueueid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActorid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEncounterid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simrs.CompensateAddERPatientEncounterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simrs.CompensateAddERPatientEncounterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simrs.CompensateAddERPatientEncounterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.CompensateAddERPatientEncounterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueueid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getActorid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getEncounterid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 queueId = 1;
 * @return {number}
 */
proto.simrs.CompensateAddERPatientEncounterRequest.prototype.getQueueid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.CompensateAddERPatientEncounterRequest} returns this
 */
proto.simrs.CompensateAddERPatientEncounterRequest.prototype.setQueueid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 actorId = 2;
 * @return {number}
 */
proto.simrs.CompensateAddERPatientEncounterRequest.prototype.getActorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.CompensateAddERPatientEncounterRequest} returns this
 */
proto.simrs.CompensateAddERPatientEncounterRequest.prototype.setActorid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 encounterId = 3;
 * @return {number}
 */
proto.simrs.CompensateAddERPatientEncounterRequest.prototype.getEncounterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.CompensateAddERPatientEncounterRequest} returns this
 */
proto.simrs.CompensateAddERPatientEncounterRequest.prototype.setEncounterid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simrs.ERPatient.prototype.toObject = function(opt_includeInstance) {
  return proto.simrs.ERPatient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simrs.ERPatient} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.ERPatient.toObject = function(includeInstance, msg) {
  var f, obj = {
    idqueue: jspb.Message.getFieldWithDefault(msg, 1, 0),
    idencounter: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mrnumber: jspb.Message.getFieldWithDefault(msg, 3, ""),
    room: (f = msg.getRoom()) && helper_pb.HelperVar.toObject(includeInstance, f),
    note: jspb.Message.getFieldWithDefault(msg, 6, ""),
    accounting: (f = msg.getAccounting()) && helper_pb.Accounting.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simrs.ERPatient}
 */
proto.simrs.ERPatient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simrs.ERPatient;
  return proto.simrs.ERPatient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simrs.ERPatient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simrs.ERPatient}
 */
proto.simrs.ERPatient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIdqueue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIdencounter(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMrnumber(value);
      break;
    case 5:
      var value = new helper_pb.HelperVar;
      reader.readMessage(value,helper_pb.HelperVar.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 7:
      var value = new helper_pb.Accounting;
      reader.readMessage(value,helper_pb.Accounting.deserializeBinaryFromReader);
      msg.setAccounting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simrs.ERPatient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simrs.ERPatient.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simrs.ERPatient} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.ERPatient.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdqueue();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getIdencounter();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMrnumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      helper_pb.HelperVar.serializeBinaryToWriter
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAccounting();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      helper_pb.Accounting.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 idQueue = 1;
 * @return {number}
 */
proto.simrs.ERPatient.prototype.getIdqueue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.ERPatient} returns this
 */
proto.simrs.ERPatient.prototype.setIdqueue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 idEncounter = 2;
 * @return {number}
 */
proto.simrs.ERPatient.prototype.getIdencounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.ERPatient} returns this
 */
proto.simrs.ERPatient.prototype.setIdencounter = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string mrNumber = 3;
 * @return {string}
 */
proto.simrs.ERPatient.prototype.getMrnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.ERPatient} returns this
 */
proto.simrs.ERPatient.prototype.setMrnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional HelperVar room = 5;
 * @return {?proto.simrs.HelperVar}
 */
proto.simrs.ERPatient.prototype.getRoom = function() {
  return /** @type{?proto.simrs.HelperVar} */ (
    jspb.Message.getWrapperField(this, helper_pb.HelperVar, 5));
};


/**
 * @param {?proto.simrs.HelperVar|undefined} value
 * @return {!proto.simrs.ERPatient} returns this
*/
proto.simrs.ERPatient.prototype.setRoom = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.ERPatient} returns this
 */
proto.simrs.ERPatient.prototype.clearRoom = function() {
  return this.setRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.ERPatient.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string note = 6;
 * @return {string}
 */
proto.simrs.ERPatient.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.ERPatient} returns this
 */
proto.simrs.ERPatient.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional Accounting accounting = 7;
 * @return {?proto.simrs.Accounting}
 */
proto.simrs.ERPatient.prototype.getAccounting = function() {
  return /** @type{?proto.simrs.Accounting} */ (
    jspb.Message.getWrapperField(this, helper_pb.Accounting, 7));
};


/**
 * @param {?proto.simrs.Accounting|undefined} value
 * @return {!proto.simrs.ERPatient} returns this
*/
proto.simrs.ERPatient.prototype.setAccounting = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.ERPatient} returns this
 */
proto.simrs.ERPatient.prototype.clearAccounting = function() {
  return this.setAccounting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.ERPatient.prototype.hasAccounting = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simrs.GenericERServiceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.simrs.GenericERServiceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simrs.GenericERServiceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.GenericERServiceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    errormessage: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simrs.GenericERServiceResponse}
 */
proto.simrs.GenericERServiceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simrs.GenericERServiceResponse;
  return proto.simrs.GenericERServiceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simrs.GenericERServiceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simrs.GenericERServiceResponse}
 */
proto.simrs.GenericERServiceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simrs.GenericERServiceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simrs.GenericERServiceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simrs.GenericERServiceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.GenericERServiceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getErrormessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.simrs.GenericERServiceResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.GenericERServiceResponse} returns this
 */
proto.simrs.GenericERServiceResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.simrs.GenericERServiceResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.GenericERServiceResponse} returns this
 */
proto.simrs.GenericERServiceResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string errorMessage = 3;
 * @return {string}
 */
proto.simrs.GenericERServiceResponse.prototype.getErrormessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.GenericERServiceResponse} returns this
 */
proto.simrs.GenericERServiceResponse.prototype.setErrormessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.simrs);
