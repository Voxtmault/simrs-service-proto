// source: encounter.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var helper_pb = require('./helper_pb.js');
goog.object.extend(proto, helper_pb);
goog.exportSymbol('proto.simrs.AddEncounterRoomHistoryRequest', null, global);
goog.exportSymbol('proto.simrs.AddEncounterRoomHistoryResponse', null, global);
goog.exportSymbol('proto.simrs.Encounter', null, global);
goog.exportSymbol('proto.simrs.EncounterPersonInCharge', null, global);
goog.exportSymbol('proto.simrs.EncounterRoomHistory', null, global);
goog.exportSymbol('proto.simrs.EncounterUpdateStatusLog', null, global);
goog.exportSymbol('proto.simrs.GetEncounterDetailsRequest', null, global);
goog.exportSymbol('proto.simrs.GetEncounterDetailsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simrs.GetEncounterDetailsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simrs.GetEncounterDetailsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simrs.GetEncounterDetailsRequest.displayName = 'proto.simrs.GetEncounterDetailsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simrs.GetEncounterDetailsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.simrs.GetEncounterDetailsResponse.repeatedFields_, null);
};
goog.inherits(proto.simrs.GetEncounterDetailsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simrs.GetEncounterDetailsResponse.displayName = 'proto.simrs.GetEncounterDetailsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simrs.AddEncounterRoomHistoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simrs.AddEncounterRoomHistoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simrs.AddEncounterRoomHistoryRequest.displayName = 'proto.simrs.AddEncounterRoomHistoryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simrs.AddEncounterRoomHistoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simrs.AddEncounterRoomHistoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simrs.AddEncounterRoomHistoryResponse.displayName = 'proto.simrs.AddEncounterRoomHistoryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simrs.Encounter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.simrs.Encounter.repeatedFields_, null);
};
goog.inherits(proto.simrs.Encounter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simrs.Encounter.displayName = 'proto.simrs.Encounter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simrs.EncounterRoomHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simrs.EncounterRoomHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simrs.EncounterRoomHistory.displayName = 'proto.simrs.EncounterRoomHistory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simrs.EncounterUpdateStatusLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simrs.EncounterUpdateStatusLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simrs.EncounterUpdateStatusLog.displayName = 'proto.simrs.EncounterUpdateStatusLog';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simrs.EncounterPersonInCharge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simrs.EncounterPersonInCharge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simrs.EncounterPersonInCharge.displayName = 'proto.simrs.EncounterPersonInCharge';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simrs.GetEncounterDetailsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.simrs.GetEncounterDetailsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simrs.GetEncounterDetailsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.GetEncounterDetailsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pagesize: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pagenumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    idencounter: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mrnumber: jspb.Message.getFieldWithDefault(msg, 4, ""),
    servicetype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    encounterstatus: jspb.Message.getFieldWithDefault(msg, 6, 0),
    rangedatestart: jspb.Message.getFieldWithDefault(msg, 7, ""),
    rangedateend: jspb.Message.getFieldWithDefault(msg, 8, ""),
    customstr: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simrs.GetEncounterDetailsRequest}
 */
proto.simrs.GetEncounterDetailsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simrs.GetEncounterDetailsRequest;
  return proto.simrs.GetEncounterDetailsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simrs.GetEncounterDetailsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simrs.GetEncounterDetailsRequest}
 */
proto.simrs.GetEncounterDetailsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPagesize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPagenumber(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIdencounter(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMrnumber(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServicetype(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEncounterstatus(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRangedatestart(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRangedateend(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomstr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simrs.GetEncounterDetailsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simrs.GetEncounterDetailsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simrs.GetEncounterDetailsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.GetEncounterDetailsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPagenumber();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getIdencounter();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getMrnumber();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getServicetype();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getEncounterstatus();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getRangedatestart();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRangedateend();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCustomstr();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional int64 pageSize = 1;
 * @return {number}
 */
proto.simrs.GetEncounterDetailsRequest.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.GetEncounterDetailsRequest} returns this
 */
proto.simrs.GetEncounterDetailsRequest.prototype.setPagesize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 pageNumber = 2;
 * @return {number}
 */
proto.simrs.GetEncounterDetailsRequest.prototype.getPagenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.GetEncounterDetailsRequest} returns this
 */
proto.simrs.GetEncounterDetailsRequest.prototype.setPagenumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 idEncounter = 3;
 * @return {number}
 */
proto.simrs.GetEncounterDetailsRequest.prototype.getIdencounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.GetEncounterDetailsRequest} returns this
 */
proto.simrs.GetEncounterDetailsRequest.prototype.setIdencounter = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string mrNumber = 4;
 * @return {string}
 */
proto.simrs.GetEncounterDetailsRequest.prototype.getMrnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.GetEncounterDetailsRequest} returns this
 */
proto.simrs.GetEncounterDetailsRequest.prototype.setMrnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 serviceType = 5;
 * @return {number}
 */
proto.simrs.GetEncounterDetailsRequest.prototype.getServicetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.GetEncounterDetailsRequest} returns this
 */
proto.simrs.GetEncounterDetailsRequest.prototype.setServicetype = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 encounterStatus = 6;
 * @return {number}
 */
proto.simrs.GetEncounterDetailsRequest.prototype.getEncounterstatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.GetEncounterDetailsRequest} returns this
 */
proto.simrs.GetEncounterDetailsRequest.prototype.setEncounterstatus = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string rangeDateStart = 7;
 * @return {string}
 */
proto.simrs.GetEncounterDetailsRequest.prototype.getRangedatestart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.GetEncounterDetailsRequest} returns this
 */
proto.simrs.GetEncounterDetailsRequest.prototype.setRangedatestart = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string rangeDateEnd = 8;
 * @return {string}
 */
proto.simrs.GetEncounterDetailsRequest.prototype.getRangedateend = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.GetEncounterDetailsRequest} returns this
 */
proto.simrs.GetEncounterDetailsRequest.prototype.setRangedateend = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string customStr = 9;
 * @return {string}
 */
proto.simrs.GetEncounterDetailsRequest.prototype.getCustomstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.GetEncounterDetailsRequest} returns this
 */
proto.simrs.GetEncounterDetailsRequest.prototype.setCustomstr = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.simrs.GetEncounterDetailsResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simrs.GetEncounterDetailsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.simrs.GetEncounterDetailsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simrs.GetEncounterDetailsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.GetEncounterDetailsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    errormessage: jspb.Message.getFieldWithDefault(msg, 3, ""),
    encountersList: jspb.Message.toObjectList(msg.getEncountersList(),
    proto.simrs.Encounter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simrs.GetEncounterDetailsResponse}
 */
proto.simrs.GetEncounterDetailsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simrs.GetEncounterDetailsResponse;
  return proto.simrs.GetEncounterDetailsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simrs.GetEncounterDetailsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simrs.GetEncounterDetailsResponse}
 */
proto.simrs.GetEncounterDetailsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormessage(value);
      break;
    case 4:
      var value = new proto.simrs.Encounter;
      reader.readMessage(value,proto.simrs.Encounter.deserializeBinaryFromReader);
      msg.addEncounters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simrs.GetEncounterDetailsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simrs.GetEncounterDetailsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simrs.GetEncounterDetailsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.GetEncounterDetailsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getErrormessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEncountersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.simrs.Encounter.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.simrs.GetEncounterDetailsResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.GetEncounterDetailsResponse} returns this
 */
proto.simrs.GetEncounterDetailsResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.simrs.GetEncounterDetailsResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.GetEncounterDetailsResponse} returns this
 */
proto.simrs.GetEncounterDetailsResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string errorMessage = 3;
 * @return {string}
 */
proto.simrs.GetEncounterDetailsResponse.prototype.getErrormessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.GetEncounterDetailsResponse} returns this
 */
proto.simrs.GetEncounterDetailsResponse.prototype.setErrormessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Encounter encounters = 4;
 * @return {!Array<!proto.simrs.Encounter>}
 */
proto.simrs.GetEncounterDetailsResponse.prototype.getEncountersList = function() {
  return /** @type{!Array<!proto.simrs.Encounter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.simrs.Encounter, 4));
};


/**
 * @param {!Array<!proto.simrs.Encounter>} value
 * @return {!proto.simrs.GetEncounterDetailsResponse} returns this
*/
proto.simrs.GetEncounterDetailsResponse.prototype.setEncountersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.simrs.Encounter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.simrs.Encounter}
 */
proto.simrs.GetEncounterDetailsResponse.prototype.addEncounters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.simrs.Encounter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.simrs.GetEncounterDetailsResponse} returns this
 */
proto.simrs.GetEncounterDetailsResponse.prototype.clearEncountersList = function() {
  return this.setEncountersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simrs.AddEncounterRoomHistoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.simrs.AddEncounterRoomHistoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simrs.AddEncounterRoomHistoryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.AddEncounterRoomHistoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    idencounter: jspb.Message.getFieldWithDefault(msg, 1, 0),
    idroom: jspb.Message.getFieldWithDefault(msg, 2, 0),
    idactor: jspb.Message.getFieldWithDefault(msg, 3, 0),
    optionalnote: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simrs.AddEncounterRoomHistoryRequest}
 */
proto.simrs.AddEncounterRoomHistoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simrs.AddEncounterRoomHistoryRequest;
  return proto.simrs.AddEncounterRoomHistoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simrs.AddEncounterRoomHistoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simrs.AddEncounterRoomHistoryRequest}
 */
proto.simrs.AddEncounterRoomHistoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIdencounter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIdroom(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIdactor(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOptionalnote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simrs.AddEncounterRoomHistoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simrs.AddEncounterRoomHistoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simrs.AddEncounterRoomHistoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.AddEncounterRoomHistoryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdencounter();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getIdroom();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getIdactor();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getOptionalnote();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 idEncounter = 1;
 * @return {number}
 */
proto.simrs.AddEncounterRoomHistoryRequest.prototype.getIdencounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.AddEncounterRoomHistoryRequest} returns this
 */
proto.simrs.AddEncounterRoomHistoryRequest.prototype.setIdencounter = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 idRoom = 2;
 * @return {number}
 */
proto.simrs.AddEncounterRoomHistoryRequest.prototype.getIdroom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.AddEncounterRoomHistoryRequest} returns this
 */
proto.simrs.AddEncounterRoomHistoryRequest.prototype.setIdroom = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 idActor = 3;
 * @return {number}
 */
proto.simrs.AddEncounterRoomHistoryRequest.prototype.getIdactor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.AddEncounterRoomHistoryRequest} returns this
 */
proto.simrs.AddEncounterRoomHistoryRequest.prototype.setIdactor = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string optionalNote = 4;
 * @return {string}
 */
proto.simrs.AddEncounterRoomHistoryRequest.prototype.getOptionalnote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.AddEncounterRoomHistoryRequest} returns this
 */
proto.simrs.AddEncounterRoomHistoryRequest.prototype.setOptionalnote = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simrs.AddEncounterRoomHistoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.simrs.AddEncounterRoomHistoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simrs.AddEncounterRoomHistoryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.AddEncounterRoomHistoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    errormessage: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simrs.AddEncounterRoomHistoryResponse}
 */
proto.simrs.AddEncounterRoomHistoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simrs.AddEncounterRoomHistoryResponse;
  return proto.simrs.AddEncounterRoomHistoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simrs.AddEncounterRoomHistoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simrs.AddEncounterRoomHistoryResponse}
 */
proto.simrs.AddEncounterRoomHistoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simrs.AddEncounterRoomHistoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simrs.AddEncounterRoomHistoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simrs.AddEncounterRoomHistoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.AddEncounterRoomHistoryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getErrormessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.simrs.AddEncounterRoomHistoryResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.AddEncounterRoomHistoryResponse} returns this
 */
proto.simrs.AddEncounterRoomHistoryResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.simrs.AddEncounterRoomHistoryResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.AddEncounterRoomHistoryResponse} returns this
 */
proto.simrs.AddEncounterRoomHistoryResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string errorMessage = 3;
 * @return {string}
 */
proto.simrs.AddEncounterRoomHistoryResponse.prototype.getErrormessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.AddEncounterRoomHistoryResponse} returns this
 */
proto.simrs.AddEncounterRoomHistoryResponse.prototype.setErrormessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.simrs.Encounter.repeatedFields_ = [9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simrs.Encounter.prototype.toObject = function(opt_includeInstance) {
  return proto.simrs.Encounter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simrs.Encounter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.Encounter.toObject = function(includeInstance, msg) {
  var f, obj = {
    idencounter: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mrnumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    admittiondate: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dischargeddate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    paymentmethod: (f = msg.getPaymentmethod()) && helper_pb.HelperVar.toObject(includeInstance, f),
    entrymethod: (f = msg.getEntrymethod()) && helper_pb.HelperVar.toObject(includeInstance, f),
    encounterstatus: (f = msg.getEncounterstatus()) && helper_pb.HelperVar.toObject(includeInstance, f),
    encountertype: (f = msg.getEncountertype()) && helper_pb.HelperVar.toObject(includeInstance, f),
    roomhistoryList: jspb.Message.toObjectList(msg.getRoomhistoryList(),
    proto.simrs.EncounterRoomHistory.toObject, includeInstance),
    statuslogList: jspb.Message.toObjectList(msg.getStatuslogList(),
    proto.simrs.EncounterUpdateStatusLog.toObject, includeInstance),
    pic: (f = msg.getPic()) && proto.simrs.EncounterPersonInCharge.toObject(includeInstance, f),
    note: jspb.Message.getFieldWithDefault(msg, 12, ""),
    accounting: (f = msg.getAccounting()) && helper_pb.Accounting.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simrs.Encounter}
 */
proto.simrs.Encounter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simrs.Encounter;
  return proto.simrs.Encounter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simrs.Encounter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simrs.Encounter}
 */
proto.simrs.Encounter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIdencounter(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMrnumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdmittiondate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDischargeddate(value);
      break;
    case 5:
      var value = new helper_pb.HelperVar;
      reader.readMessage(value,helper_pb.HelperVar.deserializeBinaryFromReader);
      msg.setPaymentmethod(value);
      break;
    case 6:
      var value = new helper_pb.HelperVar;
      reader.readMessage(value,helper_pb.HelperVar.deserializeBinaryFromReader);
      msg.setEntrymethod(value);
      break;
    case 7:
      var value = new helper_pb.HelperVar;
      reader.readMessage(value,helper_pb.HelperVar.deserializeBinaryFromReader);
      msg.setEncounterstatus(value);
      break;
    case 8:
      var value = new helper_pb.HelperVar;
      reader.readMessage(value,helper_pb.HelperVar.deserializeBinaryFromReader);
      msg.setEncountertype(value);
      break;
    case 9:
      var value = new proto.simrs.EncounterRoomHistory;
      reader.readMessage(value,proto.simrs.EncounterRoomHistory.deserializeBinaryFromReader);
      msg.addRoomhistory(value);
      break;
    case 10:
      var value = new proto.simrs.EncounterUpdateStatusLog;
      reader.readMessage(value,proto.simrs.EncounterUpdateStatusLog.deserializeBinaryFromReader);
      msg.addStatuslog(value);
      break;
    case 11:
      var value = new proto.simrs.EncounterPersonInCharge;
      reader.readMessage(value,proto.simrs.EncounterPersonInCharge.deserializeBinaryFromReader);
      msg.setPic(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 13:
      var value = new helper_pb.Accounting;
      reader.readMessage(value,helper_pb.Accounting.deserializeBinaryFromReader);
      msg.setAccounting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simrs.Encounter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simrs.Encounter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simrs.Encounter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.Encounter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdencounter();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMrnumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAdmittiondate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDischargeddate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPaymentmethod();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      helper_pb.HelperVar.serializeBinaryToWriter
    );
  }
  f = message.getEntrymethod();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      helper_pb.HelperVar.serializeBinaryToWriter
    );
  }
  f = message.getEncounterstatus();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      helper_pb.HelperVar.serializeBinaryToWriter
    );
  }
  f = message.getEncountertype();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      helper_pb.HelperVar.serializeBinaryToWriter
    );
  }
  f = message.getRoomhistoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.simrs.EncounterRoomHistory.serializeBinaryToWriter
    );
  }
  f = message.getStatuslogList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.simrs.EncounterUpdateStatusLog.serializeBinaryToWriter
    );
  }
  f = message.getPic();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.simrs.EncounterPersonInCharge.serializeBinaryToWriter
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getAccounting();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      helper_pb.Accounting.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 idEncounter = 1;
 * @return {number}
 */
proto.simrs.Encounter.prototype.getIdencounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.Encounter} returns this
 */
proto.simrs.Encounter.prototype.setIdencounter = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string mrNumber = 2;
 * @return {string}
 */
proto.simrs.Encounter.prototype.getMrnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.Encounter} returns this
 */
proto.simrs.Encounter.prototype.setMrnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string admittionDate = 3;
 * @return {string}
 */
proto.simrs.Encounter.prototype.getAdmittiondate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.Encounter} returns this
 */
proto.simrs.Encounter.prototype.setAdmittiondate = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string dischargedDate = 4;
 * @return {string}
 */
proto.simrs.Encounter.prototype.getDischargeddate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.Encounter} returns this
 */
proto.simrs.Encounter.prototype.setDischargeddate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional HelperVar paymentMethod = 5;
 * @return {?proto.simrs.HelperVar}
 */
proto.simrs.Encounter.prototype.getPaymentmethod = function() {
  return /** @type{?proto.simrs.HelperVar} */ (
    jspb.Message.getWrapperField(this, helper_pb.HelperVar, 5));
};


/**
 * @param {?proto.simrs.HelperVar|undefined} value
 * @return {!proto.simrs.Encounter} returns this
*/
proto.simrs.Encounter.prototype.setPaymentmethod = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.Encounter} returns this
 */
proto.simrs.Encounter.prototype.clearPaymentmethod = function() {
  return this.setPaymentmethod(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.Encounter.prototype.hasPaymentmethod = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional HelperVar entryMethod = 6;
 * @return {?proto.simrs.HelperVar}
 */
proto.simrs.Encounter.prototype.getEntrymethod = function() {
  return /** @type{?proto.simrs.HelperVar} */ (
    jspb.Message.getWrapperField(this, helper_pb.HelperVar, 6));
};


/**
 * @param {?proto.simrs.HelperVar|undefined} value
 * @return {!proto.simrs.Encounter} returns this
*/
proto.simrs.Encounter.prototype.setEntrymethod = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.Encounter} returns this
 */
proto.simrs.Encounter.prototype.clearEntrymethod = function() {
  return this.setEntrymethod(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.Encounter.prototype.hasEntrymethod = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional HelperVar encounterStatus = 7;
 * @return {?proto.simrs.HelperVar}
 */
proto.simrs.Encounter.prototype.getEncounterstatus = function() {
  return /** @type{?proto.simrs.HelperVar} */ (
    jspb.Message.getWrapperField(this, helper_pb.HelperVar, 7));
};


/**
 * @param {?proto.simrs.HelperVar|undefined} value
 * @return {!proto.simrs.Encounter} returns this
*/
proto.simrs.Encounter.prototype.setEncounterstatus = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.Encounter} returns this
 */
proto.simrs.Encounter.prototype.clearEncounterstatus = function() {
  return this.setEncounterstatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.Encounter.prototype.hasEncounterstatus = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional HelperVar encounterType = 8;
 * @return {?proto.simrs.HelperVar}
 */
proto.simrs.Encounter.prototype.getEncountertype = function() {
  return /** @type{?proto.simrs.HelperVar} */ (
    jspb.Message.getWrapperField(this, helper_pb.HelperVar, 8));
};


/**
 * @param {?proto.simrs.HelperVar|undefined} value
 * @return {!proto.simrs.Encounter} returns this
*/
proto.simrs.Encounter.prototype.setEncountertype = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.Encounter} returns this
 */
proto.simrs.Encounter.prototype.clearEncountertype = function() {
  return this.setEncountertype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.Encounter.prototype.hasEncountertype = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated EncounterRoomHistory roomHistory = 9;
 * @return {!Array<!proto.simrs.EncounterRoomHistory>}
 */
proto.simrs.Encounter.prototype.getRoomhistoryList = function() {
  return /** @type{!Array<!proto.simrs.EncounterRoomHistory>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.simrs.EncounterRoomHistory, 9));
};


/**
 * @param {!Array<!proto.simrs.EncounterRoomHistory>} value
 * @return {!proto.simrs.Encounter} returns this
*/
proto.simrs.Encounter.prototype.setRoomhistoryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.simrs.EncounterRoomHistory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.simrs.EncounterRoomHistory}
 */
proto.simrs.Encounter.prototype.addRoomhistory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.simrs.EncounterRoomHistory, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.simrs.Encounter} returns this
 */
proto.simrs.Encounter.prototype.clearRoomhistoryList = function() {
  return this.setRoomhistoryList([]);
};


/**
 * repeated EncounterUpdateStatusLog statusLog = 10;
 * @return {!Array<!proto.simrs.EncounterUpdateStatusLog>}
 */
proto.simrs.Encounter.prototype.getStatuslogList = function() {
  return /** @type{!Array<!proto.simrs.EncounterUpdateStatusLog>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.simrs.EncounterUpdateStatusLog, 10));
};


/**
 * @param {!Array<!proto.simrs.EncounterUpdateStatusLog>} value
 * @return {!proto.simrs.Encounter} returns this
*/
proto.simrs.Encounter.prototype.setStatuslogList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.simrs.EncounterUpdateStatusLog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.simrs.EncounterUpdateStatusLog}
 */
proto.simrs.Encounter.prototype.addStatuslog = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.simrs.EncounterUpdateStatusLog, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.simrs.Encounter} returns this
 */
proto.simrs.Encounter.prototype.clearStatuslogList = function() {
  return this.setStatuslogList([]);
};


/**
 * optional EncounterPersonInCharge pic = 11;
 * @return {?proto.simrs.EncounterPersonInCharge}
 */
proto.simrs.Encounter.prototype.getPic = function() {
  return /** @type{?proto.simrs.EncounterPersonInCharge} */ (
    jspb.Message.getWrapperField(this, proto.simrs.EncounterPersonInCharge, 11));
};


/**
 * @param {?proto.simrs.EncounterPersonInCharge|undefined} value
 * @return {!proto.simrs.Encounter} returns this
*/
proto.simrs.Encounter.prototype.setPic = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.Encounter} returns this
 */
proto.simrs.Encounter.prototype.clearPic = function() {
  return this.setPic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.Encounter.prototype.hasPic = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string note = 12;
 * @return {string}
 */
proto.simrs.Encounter.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.Encounter} returns this
 */
proto.simrs.Encounter.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional Accounting accounting = 13;
 * @return {?proto.simrs.Accounting}
 */
proto.simrs.Encounter.prototype.getAccounting = function() {
  return /** @type{?proto.simrs.Accounting} */ (
    jspb.Message.getWrapperField(this, helper_pb.Accounting, 13));
};


/**
 * @param {?proto.simrs.Accounting|undefined} value
 * @return {!proto.simrs.Encounter} returns this
*/
proto.simrs.Encounter.prototype.setAccounting = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.Encounter} returns this
 */
proto.simrs.Encounter.prototype.clearAccounting = function() {
  return this.setAccounting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.Encounter.prototype.hasAccounting = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simrs.EncounterRoomHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.simrs.EncounterRoomHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simrs.EncounterRoomHistory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.EncounterRoomHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    idencounter: jspb.Message.getFieldWithDefault(msg, 2, 0),
    room: (f = msg.getRoom()) && helper_pb.HelperVar.toObject(includeInstance, f),
    admittiondate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dischargedate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    sep: jspb.Message.getFieldWithDefault(msg, 6, ""),
    accounting: (f = msg.getAccounting()) && helper_pb.Accounting.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simrs.EncounterRoomHistory}
 */
proto.simrs.EncounterRoomHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simrs.EncounterRoomHistory;
  return proto.simrs.EncounterRoomHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simrs.EncounterRoomHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simrs.EncounterRoomHistory}
 */
proto.simrs.EncounterRoomHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIdencounter(value);
      break;
    case 3:
      var value = new helper_pb.HelperVar;
      reader.readMessage(value,helper_pb.HelperVar.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdmittiondate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDischargedate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSep(value);
      break;
    case 7:
      var value = new helper_pb.Accounting;
      reader.readMessage(value,helper_pb.Accounting.deserializeBinaryFromReader);
      msg.setAccounting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simrs.EncounterRoomHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simrs.EncounterRoomHistory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simrs.EncounterRoomHistory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.EncounterRoomHistory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getIdencounter();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      helper_pb.HelperVar.serializeBinaryToWriter
    );
  }
  f = message.getAdmittiondate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDischargedate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSep();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAccounting();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      helper_pb.Accounting.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.simrs.EncounterRoomHistory.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.EncounterRoomHistory} returns this
 */
proto.simrs.EncounterRoomHistory.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 idEncounter = 2;
 * @return {number}
 */
proto.simrs.EncounterRoomHistory.prototype.getIdencounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.EncounterRoomHistory} returns this
 */
proto.simrs.EncounterRoomHistory.prototype.setIdencounter = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional HelperVar room = 3;
 * @return {?proto.simrs.HelperVar}
 */
proto.simrs.EncounterRoomHistory.prototype.getRoom = function() {
  return /** @type{?proto.simrs.HelperVar} */ (
    jspb.Message.getWrapperField(this, helper_pb.HelperVar, 3));
};


/**
 * @param {?proto.simrs.HelperVar|undefined} value
 * @return {!proto.simrs.EncounterRoomHistory} returns this
*/
proto.simrs.EncounterRoomHistory.prototype.setRoom = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.EncounterRoomHistory} returns this
 */
proto.simrs.EncounterRoomHistory.prototype.clearRoom = function() {
  return this.setRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.EncounterRoomHistory.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string admittionDate = 4;
 * @return {string}
 */
proto.simrs.EncounterRoomHistory.prototype.getAdmittiondate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.EncounterRoomHistory} returns this
 */
proto.simrs.EncounterRoomHistory.prototype.setAdmittiondate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string DischargeDate = 5;
 * @return {string}
 */
proto.simrs.EncounterRoomHistory.prototype.getDischargedate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.EncounterRoomHistory} returns this
 */
proto.simrs.EncounterRoomHistory.prototype.setDischargedate = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string sep = 6;
 * @return {string}
 */
proto.simrs.EncounterRoomHistory.prototype.getSep = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.EncounterRoomHistory} returns this
 */
proto.simrs.EncounterRoomHistory.prototype.setSep = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional Accounting accounting = 7;
 * @return {?proto.simrs.Accounting}
 */
proto.simrs.EncounterRoomHistory.prototype.getAccounting = function() {
  return /** @type{?proto.simrs.Accounting} */ (
    jspb.Message.getWrapperField(this, helper_pb.Accounting, 7));
};


/**
 * @param {?proto.simrs.Accounting|undefined} value
 * @return {!proto.simrs.EncounterRoomHistory} returns this
*/
proto.simrs.EncounterRoomHistory.prototype.setAccounting = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.EncounterRoomHistory} returns this
 */
proto.simrs.EncounterRoomHistory.prototype.clearAccounting = function() {
  return this.setAccounting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.EncounterRoomHistory.prototype.hasAccounting = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simrs.EncounterUpdateStatusLog.prototype.toObject = function(opt_includeInstance) {
  return proto.simrs.EncounterUpdateStatusLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simrs.EncounterUpdateStatusLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.EncounterUpdateStatusLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    idencounter: jspb.Message.getFieldWithDefault(msg, 2, 0),
    room: (f = msg.getRoom()) && helper_pb.HelperVar.toObject(includeInstance, f),
    encounterstatus: (f = msg.getEncounterstatus()) && helper_pb.HelperVar.toObject(includeInstance, f),
    accounting: (f = msg.getAccounting()) && helper_pb.Accounting.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simrs.EncounterUpdateStatusLog}
 */
proto.simrs.EncounterUpdateStatusLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simrs.EncounterUpdateStatusLog;
  return proto.simrs.EncounterUpdateStatusLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simrs.EncounterUpdateStatusLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simrs.EncounterUpdateStatusLog}
 */
proto.simrs.EncounterUpdateStatusLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIdencounter(value);
      break;
    case 3:
      var value = new helper_pb.HelperVar;
      reader.readMessage(value,helper_pb.HelperVar.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    case 4:
      var value = new helper_pb.HelperVar;
      reader.readMessage(value,helper_pb.HelperVar.deserializeBinaryFromReader);
      msg.setEncounterstatus(value);
      break;
    case 5:
      var value = new helper_pb.Accounting;
      reader.readMessage(value,helper_pb.Accounting.deserializeBinaryFromReader);
      msg.setAccounting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simrs.EncounterUpdateStatusLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simrs.EncounterUpdateStatusLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simrs.EncounterUpdateStatusLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.EncounterUpdateStatusLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getIdencounter();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      helper_pb.HelperVar.serializeBinaryToWriter
    );
  }
  f = message.getEncounterstatus();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      helper_pb.HelperVar.serializeBinaryToWriter
    );
  }
  f = message.getAccounting();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      helper_pb.Accounting.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.simrs.EncounterUpdateStatusLog.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.EncounterUpdateStatusLog} returns this
 */
proto.simrs.EncounterUpdateStatusLog.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 idEncounter = 2;
 * @return {number}
 */
proto.simrs.EncounterUpdateStatusLog.prototype.getIdencounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.EncounterUpdateStatusLog} returns this
 */
proto.simrs.EncounterUpdateStatusLog.prototype.setIdencounter = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional HelperVar room = 3;
 * @return {?proto.simrs.HelperVar}
 */
proto.simrs.EncounterUpdateStatusLog.prototype.getRoom = function() {
  return /** @type{?proto.simrs.HelperVar} */ (
    jspb.Message.getWrapperField(this, helper_pb.HelperVar, 3));
};


/**
 * @param {?proto.simrs.HelperVar|undefined} value
 * @return {!proto.simrs.EncounterUpdateStatusLog} returns this
*/
proto.simrs.EncounterUpdateStatusLog.prototype.setRoom = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.EncounterUpdateStatusLog} returns this
 */
proto.simrs.EncounterUpdateStatusLog.prototype.clearRoom = function() {
  return this.setRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.EncounterUpdateStatusLog.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional HelperVar encounterStatus = 4;
 * @return {?proto.simrs.HelperVar}
 */
proto.simrs.EncounterUpdateStatusLog.prototype.getEncounterstatus = function() {
  return /** @type{?proto.simrs.HelperVar} */ (
    jspb.Message.getWrapperField(this, helper_pb.HelperVar, 4));
};


/**
 * @param {?proto.simrs.HelperVar|undefined} value
 * @return {!proto.simrs.EncounterUpdateStatusLog} returns this
*/
proto.simrs.EncounterUpdateStatusLog.prototype.setEncounterstatus = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.EncounterUpdateStatusLog} returns this
 */
proto.simrs.EncounterUpdateStatusLog.prototype.clearEncounterstatus = function() {
  return this.setEncounterstatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.EncounterUpdateStatusLog.prototype.hasEncounterstatus = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Accounting accounting = 5;
 * @return {?proto.simrs.Accounting}
 */
proto.simrs.EncounterUpdateStatusLog.prototype.getAccounting = function() {
  return /** @type{?proto.simrs.Accounting} */ (
    jspb.Message.getWrapperField(this, helper_pb.Accounting, 5));
};


/**
 * @param {?proto.simrs.Accounting|undefined} value
 * @return {!proto.simrs.EncounterUpdateStatusLog} returns this
*/
proto.simrs.EncounterUpdateStatusLog.prototype.setAccounting = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.EncounterUpdateStatusLog} returns this
 */
proto.simrs.EncounterUpdateStatusLog.prototype.clearAccounting = function() {
  return this.setAccounting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.EncounterUpdateStatusLog.prototype.hasAccounting = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simrs.EncounterPersonInCharge.prototype.toObject = function(opt_includeInstance) {
  return proto.simrs.EncounterPersonInCharge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simrs.EncounterPersonInCharge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.EncounterPersonInCharge.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 2, ""),
    relation: (f = msg.getRelation()) && helper_pb.HelperVar.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simrs.EncounterPersonInCharge}
 */
proto.simrs.EncounterPersonInCharge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simrs.EncounterPersonInCharge;
  return proto.simrs.EncounterPersonInCharge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simrs.EncounterPersonInCharge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simrs.EncounterPersonInCharge}
 */
proto.simrs.EncounterPersonInCharge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 3:
      var value = new helper_pb.HelperVar;
      reader.readMessage(value,helper_pb.HelperVar.deserializeBinaryFromReader);
      msg.setRelation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simrs.EncounterPersonInCharge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simrs.EncounterPersonInCharge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simrs.EncounterPersonInCharge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.EncounterPersonInCharge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRelation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      helper_pb.HelperVar.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.simrs.EncounterPersonInCharge.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.EncounterPersonInCharge} returns this
 */
proto.simrs.EncounterPersonInCharge.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string phone = 2;
 * @return {string}
 */
proto.simrs.EncounterPersonInCharge.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.EncounterPersonInCharge} returns this
 */
proto.simrs.EncounterPersonInCharge.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional HelperVar relation = 3;
 * @return {?proto.simrs.HelperVar}
 */
proto.simrs.EncounterPersonInCharge.prototype.getRelation = function() {
  return /** @type{?proto.simrs.HelperVar} */ (
    jspb.Message.getWrapperField(this, helper_pb.HelperVar, 3));
};


/**
 * @param {?proto.simrs.HelperVar|undefined} value
 * @return {!proto.simrs.EncounterPersonInCharge} returns this
*/
proto.simrs.EncounterPersonInCharge.prototype.setRelation = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.EncounterPersonInCharge} returns this
 */
proto.simrs.EncounterPersonInCharge.prototype.clearRelation = function() {
  return this.setRelation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.EncounterPersonInCharge.prototype.hasRelation = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.simrs);
