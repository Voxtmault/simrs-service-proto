// source: patient.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var helper_pb = require('./helper_pb.js');
goog.object.extend(proto, helper_pb);
goog.exportSymbol('proto.simrs.BloodType', null, global);
goog.exportSymbol('proto.simrs.CauseOfDeath', null, global);
goog.exportSymbol('proto.simrs.FamilyData', null, global);
goog.exportSymbol('proto.simrs.GetPatientsRequest', null, global);
goog.exportSymbol('proto.simrs.GetPatientsResponse', null, global);
goog.exportSymbol('proto.simrs.Insurance', null, global);
goog.exportSymbol('proto.simrs.PatientData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simrs.GetPatientsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simrs.GetPatientsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simrs.GetPatientsRequest.displayName = 'proto.simrs.GetPatientsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simrs.GetPatientsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.simrs.GetPatientsResponse.repeatedFields_, null);
};
goog.inherits(proto.simrs.GetPatientsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simrs.GetPatientsResponse.displayName = 'proto.simrs.GetPatientsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simrs.Insurance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simrs.Insurance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simrs.Insurance.displayName = 'proto.simrs.Insurance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simrs.FamilyData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simrs.FamilyData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simrs.FamilyData.displayName = 'proto.simrs.FamilyData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simrs.CauseOfDeath = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simrs.CauseOfDeath, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simrs.CauseOfDeath.displayName = 'proto.simrs.CauseOfDeath';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simrs.BloodType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simrs.BloodType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simrs.BloodType.displayName = 'proto.simrs.BloodType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simrs.PatientData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.simrs.PatientData.repeatedFields_, null);
};
goog.inherits(proto.simrs.PatientData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simrs.PatientData.displayName = 'proto.simrs.PatientData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simrs.GetPatientsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.simrs.GetPatientsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simrs.GetPatientsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.GetPatientsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pagesize: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pagenumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mrnumber: jspb.Message.getFieldWithDefault(msg, 3, ""),
    patientname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dob: jspb.Message.getFieldWithDefault(msg, 5, ""),
    nik: jspb.Message.getFieldWithDefault(msg, 6, ""),
    mrstr: jspb.Message.getFieldWithDefault(msg, 7, ""),
    mothernik: jspb.Message.getFieldWithDefault(msg, 8, ""),
    bpjsid: jspb.Message.getFieldWithDefault(msg, 9, ""),
    ihsnumber: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simrs.GetPatientsRequest}
 */
proto.simrs.GetPatientsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simrs.GetPatientsRequest;
  return proto.simrs.GetPatientsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simrs.GetPatientsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simrs.GetPatientsRequest}
 */
proto.simrs.GetPatientsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPagesize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPagenumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMrnumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPatientname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDob(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNik(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMrstr(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMothernik(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setBpjsid(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setIhsnumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simrs.GetPatientsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simrs.GetPatientsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simrs.GetPatientsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.GetPatientsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPagenumber();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMrnumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPatientname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDob();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getNik();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMrstr();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMothernik();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getBpjsid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getIhsnumber();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional int64 pageSize = 1;
 * @return {number}
 */
proto.simrs.GetPatientsRequest.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.GetPatientsRequest} returns this
 */
proto.simrs.GetPatientsRequest.prototype.setPagesize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 pageNumber = 2;
 * @return {number}
 */
proto.simrs.GetPatientsRequest.prototype.getPagenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.GetPatientsRequest} returns this
 */
proto.simrs.GetPatientsRequest.prototype.setPagenumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string mrNumber = 3;
 * @return {string}
 */
proto.simrs.GetPatientsRequest.prototype.getMrnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.GetPatientsRequest} returns this
 */
proto.simrs.GetPatientsRequest.prototype.setMrnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string patientName = 4;
 * @return {string}
 */
proto.simrs.GetPatientsRequest.prototype.getPatientname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.GetPatientsRequest} returns this
 */
proto.simrs.GetPatientsRequest.prototype.setPatientname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string dob = 5;
 * @return {string}
 */
proto.simrs.GetPatientsRequest.prototype.getDob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.GetPatientsRequest} returns this
 */
proto.simrs.GetPatientsRequest.prototype.setDob = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string nik = 6;
 * @return {string}
 */
proto.simrs.GetPatientsRequest.prototype.getNik = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.GetPatientsRequest} returns this
 */
proto.simrs.GetPatientsRequest.prototype.setNik = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string mrStr = 7;
 * @return {string}
 */
proto.simrs.GetPatientsRequest.prototype.getMrstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.GetPatientsRequest} returns this
 */
proto.simrs.GetPatientsRequest.prototype.setMrstr = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string motherNik = 8;
 * @return {string}
 */
proto.simrs.GetPatientsRequest.prototype.getMothernik = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.GetPatientsRequest} returns this
 */
proto.simrs.GetPatientsRequest.prototype.setMothernik = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string bpjsId = 9;
 * @return {string}
 */
proto.simrs.GetPatientsRequest.prototype.getBpjsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.GetPatientsRequest} returns this
 */
proto.simrs.GetPatientsRequest.prototype.setBpjsid = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string ihsNumber = 10;
 * @return {string}
 */
proto.simrs.GetPatientsRequest.prototype.getIhsnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.GetPatientsRequest} returns this
 */
proto.simrs.GetPatientsRequest.prototype.setIhsnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.simrs.GetPatientsResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simrs.GetPatientsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.simrs.GetPatientsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simrs.GetPatientsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.GetPatientsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    errormessage: jspb.Message.getFieldWithDefault(msg, 3, ""),
    patientsList: jspb.Message.toObjectList(msg.getPatientsList(),
    proto.simrs.PatientData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simrs.GetPatientsResponse}
 */
proto.simrs.GetPatientsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simrs.GetPatientsResponse;
  return proto.simrs.GetPatientsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simrs.GetPatientsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simrs.GetPatientsResponse}
 */
proto.simrs.GetPatientsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormessage(value);
      break;
    case 4:
      var value = new proto.simrs.PatientData;
      reader.readMessage(value,proto.simrs.PatientData.deserializeBinaryFromReader);
      msg.addPatients(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simrs.GetPatientsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simrs.GetPatientsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simrs.GetPatientsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.GetPatientsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getErrormessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPatientsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.simrs.PatientData.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.simrs.GetPatientsResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.GetPatientsResponse} returns this
 */
proto.simrs.GetPatientsResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.simrs.GetPatientsResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.GetPatientsResponse} returns this
 */
proto.simrs.GetPatientsResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string errorMessage = 3;
 * @return {string}
 */
proto.simrs.GetPatientsResponse.prototype.getErrormessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.GetPatientsResponse} returns this
 */
proto.simrs.GetPatientsResponse.prototype.setErrormessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated PatientData patients = 4;
 * @return {!Array<!proto.simrs.PatientData>}
 */
proto.simrs.GetPatientsResponse.prototype.getPatientsList = function() {
  return /** @type{!Array<!proto.simrs.PatientData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.simrs.PatientData, 4));
};


/**
 * @param {!Array<!proto.simrs.PatientData>} value
 * @return {!proto.simrs.GetPatientsResponse} returns this
*/
proto.simrs.GetPatientsResponse.prototype.setPatientsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.simrs.PatientData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.simrs.PatientData}
 */
proto.simrs.GetPatientsResponse.prototype.addPatients = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.simrs.PatientData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.simrs.GetPatientsResponse} returns this
 */
proto.simrs.GetPatientsResponse.prototype.clearPatientsList = function() {
  return this.setPatientsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simrs.Insurance.prototype.toObject = function(opt_includeInstance) {
  return proto.simrs.Insurance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simrs.Insurance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.Insurance.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mrnumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    insurancenumber: jspb.Message.getFieldWithDefault(msg, 3, ""),
    insurancename: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simrs.Insurance}
 */
proto.simrs.Insurance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simrs.Insurance;
  return proto.simrs.Insurance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simrs.Insurance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simrs.Insurance}
 */
proto.simrs.Insurance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMrnumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInsurancenumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInsurancename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simrs.Insurance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simrs.Insurance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simrs.Insurance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.Insurance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMrnumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInsurancenumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInsurancename();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.simrs.Insurance.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.Insurance} returns this
 */
proto.simrs.Insurance.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string mrNumber = 2;
 * @return {string}
 */
proto.simrs.Insurance.prototype.getMrnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.Insurance} returns this
 */
proto.simrs.Insurance.prototype.setMrnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string insuranceNumber = 3;
 * @return {string}
 */
proto.simrs.Insurance.prototype.getInsurancenumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.Insurance} returns this
 */
proto.simrs.Insurance.prototype.setInsurancenumber = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string insuranceName = 4;
 * @return {string}
 */
proto.simrs.Insurance.prototype.getInsurancename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.Insurance} returns this
 */
proto.simrs.Insurance.prototype.setInsurancename = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simrs.FamilyData.prototype.toObject = function(opt_includeInstance) {
  return proto.simrs.FamilyData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simrs.FamilyData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.FamilyData.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mrnumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    address: jspb.Message.getFieldWithDefault(msg, 4, ""),
    telephone: jspb.Message.getFieldWithDefault(msg, 5, ""),
    relation: (f = msg.getRelation()) && helper_pb.HelperVar.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simrs.FamilyData}
 */
proto.simrs.FamilyData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simrs.FamilyData;
  return proto.simrs.FamilyData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simrs.FamilyData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simrs.FamilyData}
 */
proto.simrs.FamilyData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMrnumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTelephone(value);
      break;
    case 6:
      var value = new helper_pb.HelperVar;
      reader.readMessage(value,helper_pb.HelperVar.deserializeBinaryFromReader);
      msg.setRelation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simrs.FamilyData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simrs.FamilyData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simrs.FamilyData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.FamilyData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMrnumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTelephone();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRelation();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      helper_pb.HelperVar.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.simrs.FamilyData.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.FamilyData} returns this
 */
proto.simrs.FamilyData.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string mrNumber = 2;
 * @return {string}
 */
proto.simrs.FamilyData.prototype.getMrnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.FamilyData} returns this
 */
proto.simrs.FamilyData.prototype.setMrnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.simrs.FamilyData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.FamilyData} returns this
 */
proto.simrs.FamilyData.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string address = 4;
 * @return {string}
 */
proto.simrs.FamilyData.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.FamilyData} returns this
 */
proto.simrs.FamilyData.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string telephone = 5;
 * @return {string}
 */
proto.simrs.FamilyData.prototype.getTelephone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.FamilyData} returns this
 */
proto.simrs.FamilyData.prototype.setTelephone = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional HelperVar relation = 6;
 * @return {?proto.simrs.HelperVar}
 */
proto.simrs.FamilyData.prototype.getRelation = function() {
  return /** @type{?proto.simrs.HelperVar} */ (
    jspb.Message.getWrapperField(this, helper_pb.HelperVar, 6));
};


/**
 * @param {?proto.simrs.HelperVar|undefined} value
 * @return {!proto.simrs.FamilyData} returns this
*/
proto.simrs.FamilyData.prototype.setRelation = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.FamilyData} returns this
 */
proto.simrs.FamilyData.prototype.clearRelation = function() {
  return this.setRelation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.FamilyData.prototype.hasRelation = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simrs.CauseOfDeath.prototype.toObject = function(opt_includeInstance) {
  return proto.simrs.CauseOfDeath.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simrs.CauseOfDeath} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.CauseOfDeath.toObject = function(includeInstance, msg) {
  var f, obj = {
    icd10Code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    note: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simrs.CauseOfDeath}
 */
proto.simrs.CauseOfDeath.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simrs.CauseOfDeath;
  return proto.simrs.CauseOfDeath.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simrs.CauseOfDeath} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simrs.CauseOfDeath}
 */
proto.simrs.CauseOfDeath.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcd10Code(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simrs.CauseOfDeath.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simrs.CauseOfDeath.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simrs.CauseOfDeath} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.CauseOfDeath.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIcd10Code();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string icd_10_code = 1;
 * @return {string}
 */
proto.simrs.CauseOfDeath.prototype.getIcd10Code = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.CauseOfDeath} returns this
 */
proto.simrs.CauseOfDeath.prototype.setIcd10Code = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string note = 2;
 * @return {string}
 */
proto.simrs.CauseOfDeath.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.CauseOfDeath} returns this
 */
proto.simrs.CauseOfDeath.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simrs.BloodType.prototype.toObject = function(opt_includeInstance) {
  return proto.simrs.BloodType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simrs.BloodType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.BloodType.toObject = function(includeInstance, msg) {
  var f, obj = {
    bloodtype: (f = msg.getBloodtype()) && helper_pb.HelperVar.toObject(includeInstance, f),
    rhesus: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simrs.BloodType}
 */
proto.simrs.BloodType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simrs.BloodType;
  return proto.simrs.BloodType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simrs.BloodType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simrs.BloodType}
 */
proto.simrs.BloodType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new helper_pb.HelperVar;
      reader.readMessage(value,helper_pb.HelperVar.deserializeBinaryFromReader);
      msg.setBloodtype(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRhesus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simrs.BloodType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simrs.BloodType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simrs.BloodType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.BloodType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBloodtype();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      helper_pb.HelperVar.serializeBinaryToWriter
    );
  }
  f = message.getRhesus();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional HelperVar bloodType = 1;
 * @return {?proto.simrs.HelperVar}
 */
proto.simrs.BloodType.prototype.getBloodtype = function() {
  return /** @type{?proto.simrs.HelperVar} */ (
    jspb.Message.getWrapperField(this, helper_pb.HelperVar, 1));
};


/**
 * @param {?proto.simrs.HelperVar|undefined} value
 * @return {!proto.simrs.BloodType} returns this
*/
proto.simrs.BloodType.prototype.setBloodtype = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.BloodType} returns this
 */
proto.simrs.BloodType.prototype.clearBloodtype = function() {
  return this.setBloodtype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.BloodType.prototype.hasBloodtype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool rhesus = 2;
 * @return {boolean}
 */
proto.simrs.BloodType.prototype.getRhesus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.simrs.BloodType} returns this
 */
proto.simrs.BloodType.prototype.setRhesus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.simrs.PatientData.repeatedFields_ = [10,13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simrs.PatientData.prototype.toObject = function(opt_includeInstance) {
  return proto.simrs.PatientData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simrs.PatientData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.PatientData.toObject = function(includeInstance, msg) {
  var f, obj = {
    patientid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mrnumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ihsNumber: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nik: jspb.Message.getFieldWithDefault(msg, 4, ""),
    motherNik: jspb.Message.getFieldWithDefault(msg, 5, ""),
    bpjsId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    name: jspb.Message.getFieldWithDefault(msg, 7, ""),
    dob: jspb.Message.getFieldWithDefault(msg, 8, ""),
    pob: jspb.Message.getFieldWithDefault(msg, 9, ""),
    insurancesList: jspb.Message.toObjectList(msg.getInsurancesList(),
    proto.simrs.Insurance.toObject, includeInstance),
    address: jspb.Message.getFieldWithDefault(msg, 11, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 12, ""),
    familyRelativesList: jspb.Message.toObjectList(msg.getFamilyRelativesList(),
    proto.simrs.FamilyData.toObject, includeInstance),
    isdeceased: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    timeofdeath: jspb.Message.getFieldWithDefault(msg, 15, ""),
    causeofdeath: (f = msg.getCauseofdeath()) && proto.simrs.CauseOfDeath.toObject(includeInstance, f),
    accounting: (f = msg.getAccounting()) && helper_pb.Accounting.toObject(includeInstance, f),
    gender: (f = msg.getGender()) && helper_pb.HelperVar.toObject(includeInstance, f),
    bloodtype: (f = msg.getBloodtype()) && proto.simrs.BloodType.toObject(includeInstance, f),
    religion: (f = msg.getReligion()) && helper_pb.HelperVar.toObject(includeInstance, f),
    marriagestatus: (f = msg.getMarriagestatus()) && helper_pb.HelperVar.toObject(includeInstance, f),
    educationlevel: (f = msg.getEducationlevel()) && helper_pb.HelperVar.toObject(includeInstance, f),
    citizenship: (f = msg.getCitizenship()) && helper_pb.HelperVar.toObject(includeInstance, f),
    age: jspb.Message.getFieldWithDefault(msg, 24, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simrs.PatientData}
 */
proto.simrs.PatientData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simrs.PatientData;
  return proto.simrs.PatientData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simrs.PatientData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simrs.PatientData}
 */
proto.simrs.PatientData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPatientid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMrnumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIhsNumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNik(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMotherNik(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBpjsId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDob(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPob(value);
      break;
    case 10:
      var value = new proto.simrs.Insurance;
      reader.readMessage(value,proto.simrs.Insurance.deserializeBinaryFromReader);
      msg.addInsurances(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 13:
      var value = new proto.simrs.FamilyData;
      reader.readMessage(value,proto.simrs.FamilyData.deserializeBinaryFromReader);
      msg.addFamilyRelatives(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdeceased(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeofdeath(value);
      break;
    case 16:
      var value = new proto.simrs.CauseOfDeath;
      reader.readMessage(value,proto.simrs.CauseOfDeath.deserializeBinaryFromReader);
      msg.setCauseofdeath(value);
      break;
    case 17:
      var value = new helper_pb.Accounting;
      reader.readMessage(value,helper_pb.Accounting.deserializeBinaryFromReader);
      msg.setAccounting(value);
      break;
    case 18:
      var value = new helper_pb.HelperVar;
      reader.readMessage(value,helper_pb.HelperVar.deserializeBinaryFromReader);
      msg.setGender(value);
      break;
    case 19:
      var value = new proto.simrs.BloodType;
      reader.readMessage(value,proto.simrs.BloodType.deserializeBinaryFromReader);
      msg.setBloodtype(value);
      break;
    case 20:
      var value = new helper_pb.HelperVar;
      reader.readMessage(value,helper_pb.HelperVar.deserializeBinaryFromReader);
      msg.setReligion(value);
      break;
    case 21:
      var value = new helper_pb.HelperVar;
      reader.readMessage(value,helper_pb.HelperVar.deserializeBinaryFromReader);
      msg.setMarriagestatus(value);
      break;
    case 22:
      var value = new helper_pb.HelperVar;
      reader.readMessage(value,helper_pb.HelperVar.deserializeBinaryFromReader);
      msg.setEducationlevel(value);
      break;
    case 23:
      var value = new helper_pb.HelperVar;
      reader.readMessage(value,helper_pb.HelperVar.deserializeBinaryFromReader);
      msg.setCitizenship(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setAge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simrs.PatientData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simrs.PatientData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simrs.PatientData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simrs.PatientData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPatientid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMrnumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIhsNumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNik();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMotherNik();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getBpjsId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDob();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPob();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getInsurancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.simrs.Insurance.serializeBinaryToWriter
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getFamilyRelativesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.simrs.FamilyData.serializeBinaryToWriter
    );
  }
  f = message.getIsdeceased();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getTimeofdeath();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getCauseofdeath();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.simrs.CauseOfDeath.serializeBinaryToWriter
    );
  }
  f = message.getAccounting();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      helper_pb.Accounting.serializeBinaryToWriter
    );
  }
  f = message.getGender();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      helper_pb.HelperVar.serializeBinaryToWriter
    );
  }
  f = message.getBloodtype();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.simrs.BloodType.serializeBinaryToWriter
    );
  }
  f = message.getReligion();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      helper_pb.HelperVar.serializeBinaryToWriter
    );
  }
  f = message.getMarriagestatus();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      helper_pb.HelperVar.serializeBinaryToWriter
    );
  }
  f = message.getEducationlevel();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      helper_pb.HelperVar.serializeBinaryToWriter
    );
  }
  f = message.getCitizenship();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      helper_pb.HelperVar.serializeBinaryToWriter
    );
  }
  f = message.getAge();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
};


/**
 * optional uint32 patientId = 1;
 * @return {number}
 */
proto.simrs.PatientData.prototype.getPatientid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.setPatientid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string mrNumber = 2;
 * @return {string}
 */
proto.simrs.PatientData.prototype.getMrnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.setMrnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ihs_number = 3;
 * @return {string}
 */
proto.simrs.PatientData.prototype.getIhsNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.setIhsNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string nik = 4;
 * @return {string}
 */
proto.simrs.PatientData.prototype.getNik = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.setNik = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string mother_nik = 5;
 * @return {string}
 */
proto.simrs.PatientData.prototype.getMotherNik = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.setMotherNik = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string bpjs_id = 6;
 * @return {string}
 */
proto.simrs.PatientData.prototype.getBpjsId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.setBpjsId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string name = 7;
 * @return {string}
 */
proto.simrs.PatientData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string dob = 8;
 * @return {string}
 */
proto.simrs.PatientData.prototype.getDob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.setDob = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string pob = 9;
 * @return {string}
 */
proto.simrs.PatientData.prototype.getPob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.setPob = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated Insurance insurances = 10;
 * @return {!Array<!proto.simrs.Insurance>}
 */
proto.simrs.PatientData.prototype.getInsurancesList = function() {
  return /** @type{!Array<!proto.simrs.Insurance>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.simrs.Insurance, 10));
};


/**
 * @param {!Array<!proto.simrs.Insurance>} value
 * @return {!proto.simrs.PatientData} returns this
*/
proto.simrs.PatientData.prototype.setInsurancesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.simrs.Insurance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.simrs.Insurance}
 */
proto.simrs.PatientData.prototype.addInsurances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.simrs.Insurance, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.clearInsurancesList = function() {
  return this.setInsurancesList([]);
};


/**
 * optional string address = 11;
 * @return {string}
 */
proto.simrs.PatientData.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string phone = 12;
 * @return {string}
 */
proto.simrs.PatientData.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * repeated FamilyData family_relatives = 13;
 * @return {!Array<!proto.simrs.FamilyData>}
 */
proto.simrs.PatientData.prototype.getFamilyRelativesList = function() {
  return /** @type{!Array<!proto.simrs.FamilyData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.simrs.FamilyData, 13));
};


/**
 * @param {!Array<!proto.simrs.FamilyData>} value
 * @return {!proto.simrs.PatientData} returns this
*/
proto.simrs.PatientData.prototype.setFamilyRelativesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.simrs.FamilyData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.simrs.FamilyData}
 */
proto.simrs.PatientData.prototype.addFamilyRelatives = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.simrs.FamilyData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.clearFamilyRelativesList = function() {
  return this.setFamilyRelativesList([]);
};


/**
 * optional bool isDeceased = 14;
 * @return {boolean}
 */
proto.simrs.PatientData.prototype.getIsdeceased = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.setIsdeceased = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional string timeOfDeath = 15;
 * @return {string}
 */
proto.simrs.PatientData.prototype.getTimeofdeath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.setTimeofdeath = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional CauseOfDeath causeOfDeath = 16;
 * @return {?proto.simrs.CauseOfDeath}
 */
proto.simrs.PatientData.prototype.getCauseofdeath = function() {
  return /** @type{?proto.simrs.CauseOfDeath} */ (
    jspb.Message.getWrapperField(this, proto.simrs.CauseOfDeath, 16));
};


/**
 * @param {?proto.simrs.CauseOfDeath|undefined} value
 * @return {!proto.simrs.PatientData} returns this
*/
proto.simrs.PatientData.prototype.setCauseofdeath = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.clearCauseofdeath = function() {
  return this.setCauseofdeath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.PatientData.prototype.hasCauseofdeath = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional Accounting accounting = 17;
 * @return {?proto.simrs.Accounting}
 */
proto.simrs.PatientData.prototype.getAccounting = function() {
  return /** @type{?proto.simrs.Accounting} */ (
    jspb.Message.getWrapperField(this, helper_pb.Accounting, 17));
};


/**
 * @param {?proto.simrs.Accounting|undefined} value
 * @return {!proto.simrs.PatientData} returns this
*/
proto.simrs.PatientData.prototype.setAccounting = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.clearAccounting = function() {
  return this.setAccounting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.PatientData.prototype.hasAccounting = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional HelperVar gender = 18;
 * @return {?proto.simrs.HelperVar}
 */
proto.simrs.PatientData.prototype.getGender = function() {
  return /** @type{?proto.simrs.HelperVar} */ (
    jspb.Message.getWrapperField(this, helper_pb.HelperVar, 18));
};


/**
 * @param {?proto.simrs.HelperVar|undefined} value
 * @return {!proto.simrs.PatientData} returns this
*/
proto.simrs.PatientData.prototype.setGender = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.clearGender = function() {
  return this.setGender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.PatientData.prototype.hasGender = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional BloodType bloodType = 19;
 * @return {?proto.simrs.BloodType}
 */
proto.simrs.PatientData.prototype.getBloodtype = function() {
  return /** @type{?proto.simrs.BloodType} */ (
    jspb.Message.getWrapperField(this, proto.simrs.BloodType, 19));
};


/**
 * @param {?proto.simrs.BloodType|undefined} value
 * @return {!proto.simrs.PatientData} returns this
*/
proto.simrs.PatientData.prototype.setBloodtype = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.clearBloodtype = function() {
  return this.setBloodtype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.PatientData.prototype.hasBloodtype = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional HelperVar religion = 20;
 * @return {?proto.simrs.HelperVar}
 */
proto.simrs.PatientData.prototype.getReligion = function() {
  return /** @type{?proto.simrs.HelperVar} */ (
    jspb.Message.getWrapperField(this, helper_pb.HelperVar, 20));
};


/**
 * @param {?proto.simrs.HelperVar|undefined} value
 * @return {!proto.simrs.PatientData} returns this
*/
proto.simrs.PatientData.prototype.setReligion = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.clearReligion = function() {
  return this.setReligion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.PatientData.prototype.hasReligion = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional HelperVar marriageStatus = 21;
 * @return {?proto.simrs.HelperVar}
 */
proto.simrs.PatientData.prototype.getMarriagestatus = function() {
  return /** @type{?proto.simrs.HelperVar} */ (
    jspb.Message.getWrapperField(this, helper_pb.HelperVar, 21));
};


/**
 * @param {?proto.simrs.HelperVar|undefined} value
 * @return {!proto.simrs.PatientData} returns this
*/
proto.simrs.PatientData.prototype.setMarriagestatus = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.clearMarriagestatus = function() {
  return this.setMarriagestatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.PatientData.prototype.hasMarriagestatus = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional HelperVar educationLevel = 22;
 * @return {?proto.simrs.HelperVar}
 */
proto.simrs.PatientData.prototype.getEducationlevel = function() {
  return /** @type{?proto.simrs.HelperVar} */ (
    jspb.Message.getWrapperField(this, helper_pb.HelperVar, 22));
};


/**
 * @param {?proto.simrs.HelperVar|undefined} value
 * @return {!proto.simrs.PatientData} returns this
*/
proto.simrs.PatientData.prototype.setEducationlevel = function(value) {
  return jspb.Message.setWrapperField(this, 22, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.clearEducationlevel = function() {
  return this.setEducationlevel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.PatientData.prototype.hasEducationlevel = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional HelperVar citizenship = 23;
 * @return {?proto.simrs.HelperVar}
 */
proto.simrs.PatientData.prototype.getCitizenship = function() {
  return /** @type{?proto.simrs.HelperVar} */ (
    jspb.Message.getWrapperField(this, helper_pb.HelperVar, 23));
};


/**
 * @param {?proto.simrs.HelperVar|undefined} value
 * @return {!proto.simrs.PatientData} returns this
*/
proto.simrs.PatientData.prototype.setCitizenship = function(value) {
  return jspb.Message.setWrapperField(this, 23, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.clearCitizenship = function() {
  return this.setCitizenship(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simrs.PatientData.prototype.hasCitizenship = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional string age = 24;
 * @return {string}
 */
proto.simrs.PatientData.prototype.getAge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * @param {string} value
 * @return {!proto.simrs.PatientData} returns this
 */
proto.simrs.PatientData.prototype.setAge = function(value) {
  return jspb.Message.setProto3StringField(this, 24, value);
};


goog.object.extend(exports, proto.simrs);
